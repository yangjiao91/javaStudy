<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:context="http://www.springframework.org/schema/context"
	xmlns:mvc="http://www.springframework.org/schema/mvc" 
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xmlns:p="http://www.springframework.org/schema/p"
	xsi:schemaLocation="  
        http://www.springframework.org/schema/beans       
        http://www.springframework.org/schema/beans/spring-beans-3.0.xsd  
        http://www.springframework.org/schema/context   
        http://www.springframework.org/schema/context/spring-context-3.0.xsd  
        http://www.springframework.org/schema/mvc  
        http://www.springframework.org/schema/mvc/spring-mvc-3.0.xsd  ">

	<description>Spring RESTful web service configuration</description>

	<bean
		class="org.springframework.beans.factory.config.PropertyPlaceholderConfigurer">
		<property name="systemPropertiesModeName" value="SYSTEM_PROPERTIES_MODE_OVERRIDE" />
		<property name="ignoreResourceNotFound" value="true" />
		<property name="locations">
			<list>
				<value>classpath*:/application.properties</value>
			</list>
		</property>
	</bean>

	<!-- enable component scanning (beware that this does not enable mapper scanning!) -->
	<context:component-scan base-package="com.funshion.dobo" />
	<!-- enable autowire -->
	<context:annotation-config />
	<!-- enable transaction demarcation with annotations -->
	<mvc:annotation-driven />

	<!-- 为了不让 spring 拦截对这些目录的访问 -->
	<mvc:resources mapping="/resources/**" location="/resources/" />
	<mvc:resources mapping="/static/**" location="/static/" />
	<mvc:resources mapping="/jsp/**" location="/jsp/" />
	<mvc:resources mapping="/js/**" location="/js/" />
	
	<!-- 配置拦截器 -->
	<!--  
	<mvc:interceptors>
		<mvc:interceptor>
			<mvc:mapping path="/product/**" />
			<bean class="com.funshion.dobo.api.rest.CommonInterceptor" />
		</mvc:interceptor>
	</mvc:interceptors>  
	-->

	<!-- 数据源配置,使用应用内的DBCP数据库连接池 -->

	<bean id="dataSource" class="org.apache.commons.dbcp.BasicDataSource" destroy-method="close">
		<!-- Connection Info -->
		<property name="driverClassName" value="${jdbc.driver}" />
		<property name="url" value="${jdbc.url}" />
		<property name="username" value="${jdbc.username}" />
		<property name="password" value="${jdbc.password}" />

		<!-- Connection Pooling Info -->
		<property name="maxIdle" value="${dbcp.maxIdle}" />
		<property name="maxActive" value="${dbcp.maxActive}" />
		<property name="defaultAutoCommit" value="false" />
		<property name="timeBetweenEvictionRunsMillis" value="3600000" />
		<property name="minEvictableIdleTimeMillis" value="3600000" />
	</bean>

	<!-- MyBATIS -->
	<bean id="transactionManager"
		class="org.springframework.jdbc.datasource.DataSourceTransactionManager">
		<property name="dataSource" ref="dataSource" />
	</bean>
	<!-- define the SqlSessionFactory -->
	<bean id="sqlSessionFactory" class="org.mybatis.spring.SqlSessionFactoryBean">
		<property name="dataSource" ref="dataSource" />
		<property name="typeAliasesPackage" value="com.funshion.dobo.base.dao.entity" />
		<property name="configLocation" value="classpath:com/funshion/dobo/common/CommonConfig.xml" />
	</bean>
	<!-- scan for mappers and let them be autowired -->
	<bean class="org.mybatis.spring.mapper.MapperScannerConfigurer">
		<property name="basePackage" value="com.funshion.dobo.base.dao.mapper" />
	</bean>
	
	<!-- CachedSchemaRegistryClient bean  -->
	<bean id="schemaRegistryClient" class="io.confluent.kafka.schemaregistry.client.CachedSchemaRegistryClient">
		<!-- registry url -->
		<constructor-arg index="0"><value>${schema.registry.baseUrl}</value></constructor-arg>
		<!-- cache map size identityMapCapacity -->
		<constructor-arg index="1"><value>${schema.registry.initCapacity}</value></constructor-arg>
	</bean>
	
    
</beans>
